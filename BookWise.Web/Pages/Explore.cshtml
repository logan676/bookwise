@page
@model BookWise.Web.Pages.ExploreModel
@using System.Linq
@{
    ViewData["Title"] = "Explore";
    var activeAuthor = Model.Authors.FirstOrDefault();
}

<div class="explore-shell">
    <div class="explore-top-tabs" role="tablist" aria-label="Explore Modes">
        <button type="button"
                class="explore-top-tab is-active"
                id="explore-tab-authors"
                role="tab"
                aria-controls="explore-pane-authors"
                aria-selected="true"
                data-explore-tab="authors">
            Authors
        </button>
        <button type="button"
                class="explore-top-tab"
                id="explore-tab-quotes"
                role="tab"
                aria-controls="explore-pane-quotes"
                aria-selected="false"
                data-explore-tab="quotes">
            Quotes
        </button>
        <button type="button"
                class="explore-top-tab"
                id="explore-tab-remarks"
                role="tab"
                aria-controls="explore-pane-remarks"
                aria-selected="false"
                data-explore-tab="remarks">
            Remarks
        </button>
        <button type="button"
                class="explore-top-tab"
                id="explore-tab-recommendations"
                role="tab"
                aria-controls="explore-pane-recommendations"
                aria-selected="false"
                data-explore-tab="recommendations">
            Recommendations
        </button>
        <button type="button"
                class="explore-top-tab"
                id="explore-tab-bestsellers"
                role="tab"
                aria-controls="explore-pane-bestsellers"
                aria-selected="false"
                data-explore-tab="bestsellers">
            Yearly Bestsellers
        </button>
    </div>

    <div class="explore-top-panels">
        <section id="explore-pane-authors"
                 class="explore-top-panel is-active"
                 role="tabpanel"
                 aria-labelledby="explore-tab-authors"
                 data-explore-tab="authors">
            <div class="explore-page">
                <aside class="authors-panel" aria-label="Authors">
                    <div class="authors-panel-header">
                        <h2>Authors</h2>
                    </div>
                    @if (!Model.Authors.Any())
                    {
                        <p class="author-empty-message">Add a book to your shelf to see authors here.</p>
                    }
                    else
                    {
                        <ul class="author-list" role="tablist">
                            @foreach (var author in Model.Authors)
                            {
                                var isActive = author == activeAuthor;
                                var paneId = $"author-pane-{author.Slug}";
                                <li class="author-item @(isActive ? "is-active" : null)">
                                    <button type="button"
                                            id="tab-@author.Slug"
                                            class="author-button"
                                            role="tab"
                                            aria-controls="@paneId"
                                            aria-selected="@(isActive ? "true" : "false")"
                                            data-author="@author.Slug">
                                        <span class="author-text">
                                            <span class="author-name">@author.Name</span>
                                            <span class="author-meta">@author.WorkCount @((author.WorkCount == 1) ? "work" : "works")</span>
                                        </span>
                                        <span class="author-count" aria-hidden="true">@author.WorkCount</span>
                                    </button>
                                </li>
                            }
                        </ul>
                    }
                </aside>

                <section class="author-content">
                    @if (!Model.Authors.Any())
                    {
                        <div class="author-empty-state">
                            <p>Add a book to your shelf to unlock author insights.</p>
                        </div>
                    }
                    else
                    {
                        @foreach (var author in Model.Authors)
                        {
                            var isActive = author == activeAuthor;
                            var paneId = $"author-pane-{author.Slug}";
                            <article id="@paneId"
                                     class="author-details-pane @(isActive ? "is-active" : null)"
                                     role="tabpanel"
                                     aria-labelledby="tab-@author.Slug"
                                     data-author="@author.Slug">
                                <header class="author-headline">
                                    <div class="author-profile">
                                        <div class="author-avatar">
                                            <div class="author-avatar-frame">
                                                <img src="@author.PhotoUrl" 
                                                     alt="@author.Name" 
                                                     loading="lazy"
                                                     referrerpolicy="no-referrer"
                                                     data-author-name="@author.Name"
                                                     onerror="this.src='/img/author-placeholder.svg'" />
                                                <div class="author-avatar-overlay"></div>
                                            </div>
                                        </div>
                                        <div class="author-info">
                                            <div class="author-name-section">
                                                <h1 class="author-display-name">@author.Name</h1>
                                                <div class="author-status-indicator">
                                                    <span class="status-dot"></span>
                                                    <span class="status-text">Active Author</span>
                                                </div>
                                            </div>
                                            <div class="author-meta">
                                                <div class="author-stats">
                                                    <div class="stat-item">
                                                        <span class="stat-number">@author.WorkCount</span>
                                                        <span class="stat-label">@(author.WorkCount == 1 ? "work" : "works")</span>
                                                    </div>
                                                    <div class="stat-divider"></div>
                                                    <div class="stat-item">
                                                        <span class="stat-number">@author.Library.Count</span>
                                                        <span class="stat-label">in your library</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <p class="author-summary">@author.Summary</p>

                                            <div class="author-identity-tags">
                                                @if (!string.IsNullOrWhiteSpace(author.Gender))
                                                {
                                                    <span class="author-tag author-tag--gender" title="Gender">
                                                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                                                            <path d="M19 3h-5a1 1 0 1 0 0 2h2.586l-3.05 3.05a6.5 6.5 0 1 0 1.414 1.414L18 6.414V9a1 1 0 1 0 2 0V4a1 1 0 0 0-1-1Z" fill="currentColor" />
                                                        </svg>
                                                        @author.Gender
                                                    </span>
                                                }
                                                @if (!string.IsNullOrWhiteSpace(author.BirthDate))
                                                {
                                                    <span class="author-tag author-tag--birth" title="Birth date"> 
                                                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                                                            <path d="M7 2a1 1 0 0 0-1 1v1H5a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h14a3 3 0 0 0 3-3V7a3 3 0 0 0-3-3h-1V3a1 1 0 1 0-2 0v1H8V3a1 1 0 0 0-1-1Zm13 9H4v7a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-7Z" fill="currentColor" />
                                                        </svg>
                                                        @author.BirthDate
                                                    </span>
                                                }
                                                @if (!string.IsNullOrWhiteSpace(author.BirthPlace))
                                                {
                                                    <span class="author-tag author-tag--place" title="Birth place">
                                                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                                                            <path d="M12 2a7 7 0 0 0-7 7c0 5.25 7 13 7 13s7-7.75 7-13a7 7 0 0 0-7-7Zm0 9.5a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5Z" fill="currentColor" />
                                                        </svg>
                                                        @author.BirthPlace
                                                    </span>
                                                }
                                                @if (!string.IsNullOrWhiteSpace(author.Occupation))
                                                {
                                                    <span class="author-tag author-tag--role" title="Occupation">
                                                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                                                            <path d="M4 7a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v1H4V7Zm0 3h16v7a3 3 0 0 1-3 3H7a3 3 0 0 1-3-3v-7Zm6 3a1 1 0 1 0-2 0v2h2v-2Zm6 0a1 1 0 1 0-2 0v2h2v-2Z" fill="currentColor" />
                                                        </svg>
                                                        @author.Occupation
                                                    </span>
                                                }
                                            </div>

                                            @if (author.OtherNames.Any() || !string.IsNullOrWhiteSpace(author.DoubanProfileUrl) || !string.IsNullOrWhiteSpace(author.WebsiteUrl))
                                            {
                                                <div class="author-links">
                                                    @foreach (var alias in author.OtherNames)
                                                    {
                                                        <span class="author-link alias" title="Also known as">
                                                            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                                                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" fill="currentColor" />
                                                            </svg>
                                                            @alias
                                                        </span>
                                                    }
                                                    @if (!string.IsNullOrWhiteSpace(author.WebsiteUrl))
                                                    {
                                                        <a class="author-link site" href="@author.WebsiteUrl" target="_blank" rel="noopener noreferrer">
                                                            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                                                                <path d="M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20Zm0 2c1.2 0 2.32.35 3.26.95C14.2 7.12 13.2 9.5 12 9.5S9.8 7.12 8.74 4.95A8.02 8.02 0 0 1 12 4Zm-6.32 3.1A8 8 0 0 1 6 6.06C6.8 7.83 7.83 9.3 9.03 10.26A8.6 8.6 0 0 1 6.08 12c.23 1.18.7 2.28 1.36 3.24 1.88-.74 3.48-1.94 4.56-3.24 1.08 1.3 2.68 2.5 4.56 3.24A8.02 8.02 0 0 0 21 12c-2.7 0-4.83-.94-6.03-1.74 1.2-.96 2.23-2.43 3.03-4.2.2.07.4.16.6.26A8 8 0 0 0 12 4a8.02 8.02 0 0 0-6.32 3.1Z" fill="currentColor" />
                                                            </svg>
                                                            Website
                                                        </a>
                                                    }
                                                    @if (!string.IsNullOrWhiteSpace(author.DoubanProfileUrl))
                                                    {
                                                        <a class="author-link douban" href="@author.DoubanProfileUrl" target="_blank" rel="noopener noreferrer">
                                                            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                                                                <path d="M4 4h16v3H4V4Zm2 5h12v7H6V9Zm-2 9h16v2H4v-2Z" fill="currentColor" />
                                                            </svg>
                                                            Douban
                                                        </a>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    @if (author.NotableWorks.Any())
                                    {
                                        <div class="author-notable">
                                            <div class="author-notable-header">
                                                <h2>Notable Works</h2>
                                                <p>Highlights from the author’s oeuvre</p>
                                            </div>
                                            <div class="author-tags">
                                                @foreach (var work in author.NotableWorks)
                                                {
                                                    <span class="author-tag author-tag--work" title="Notable work">@work</span>
                                                }
                                            </div>
                                        </div>
                                    }
                                </header>

                                <section class="author-collection">
                                    <div class="collection-header">
                                        <h2>Your Library</h2>
                                        <p>Titles already on your shelf.</p>
                                    </div>
                                    <div class="author-book-strip" role="list">
                                        @foreach (var book in author.Library)
                                        {
                                            <article class="author-book-card" role="listitem">
                                                <div class="author-book-cover">
                                                    <img src="@book.CoverUrl"
                                                         alt="@book.Title cover"
                                                         loading="lazy" />
                                                </div>
                                                <div class="author-book-info">
                                                    <h3>@book.Title</h3>
                                                    <p>@book.Subtitle</p>
                                                </div>
                                            </article>
                                        }
                                    </div>
                                </section>

                                <section class="author-collection">
                                    <div class="collection-header">
                                        <h2>Available Works</h2>
                                        <p>Explore more from this author.</p>
                                    </div>
                                    <div class="author-book-strip" role="list">
                                        @foreach (var book in author.AvailableWorks)
                                        {
                                            <article class="author-book-card" role="listitem">
                                                <div class="author-book-cover">
                                                    <img src="@book.CoverUrl"
                                                         alt="@book.Title cover"
                                                         loading="lazy" />
                                                </div>
                                                <div class="author-book-info">
                                                    <h3>@book.Title</h3>
                                                    <p>@book.Subtitle</p>
                                                </div>
                                            </article>
                                        }
                                    </div>
                                </section>
                            </article>
                        }
                    }
                </section>
            </div>
        </section>

        <section id="explore-pane-remarks"
                 class="explore-top-panel"
                 role="tabpanel"
                 aria-labelledby="explore-tab-remarks"
                 data-explore-tab="remarks"
                 hidden>
            <div class="remarks-page">
                <header class="remarks-header">
                    <p class="remarks-kicker">Reader Remarks</p>
                    <h1 class="remarks-title">Fresh thoughts from you and the community</h1>
                </header>

                <section class="remarks-collection">
                    <div class="remarks-collection-header">
                        <h2 class="remarks-section-heading">Your Recent Remarks</h2>
                        <p>Private notes you’ve saved while adding books.</p>
                    </div>
                    @if (!Model.MyRecentRemarks.Any())
                    {
                        <p class="empty-hint">No personal remarks yet. Add one when saving a book.</p>
                    }
                    else
                    {
                        var myGroups = Model.MyRecentRemarks
                            .GroupBy(r => new { r.BookTitle, r.BookAuthor, Ccover = r.CoverImageUrl })
                            .OrderByDescending(g => g.Max(x => x.AddedOn));

                        <div class="remarks-groups">
                            @foreach (var group in myGroups)
                            {
                                <section class="remark-book-group" aria-label="Remarks for @group.Key.BookTitle by @group.Key.BookAuthor">
                                    <header class="remark-group-header">
                                        <div class="remark-group-cover">
                                            <img src="@group.Key.Ccover" alt="@group.Key.BookTitle cover" loading="lazy" />
                                        </div>
                                        <div class="remark-group-meta">
                                            <h3 class="remark-group-title">@group.Key.BookTitle</h3>
                                            <p class="remark-group-author">@group.Key.BookAuthor</p>
                                        </div>
                                        <span class="remark-group-badge" title="Your remarks">Mine • @group.Count()</span>
                                    </header>
                                    <div class="remark-list">
                                        @foreach (var item in group)
                                        {
                                            <article class="remark-item">
                                                @if (!string.IsNullOrWhiteSpace(item.Title))
                                                {
                                                    <h4 class="remark-item-title">@item.Title</h4>
                                                }
                                                <p class="remark-item-content">@item.Content</p>
                                            </article>
                                        }
                                    </div>
                                </section>
                            }
                        </div>
                    }
                </section>

                <section class="remarks-collection">
                    <div class="remarks-collection-header">
                        <h2 class="remarks-section-heading">Community Picks</h2>
                        <p>Short, popular comments from Douban readers.</p>
                    </div>
                    @if (!Model.CommunityRecentRemarks.Any())
                    {
                        <p class="empty-hint">No community remarks yet. Add a book with a Douban link to fetch them.</p>
                    }
                    else
                    {
                        var communityGroups = Model.CommunityRecentRemarks
                            .GroupBy(r => new { r.BookTitle, r.BookAuthor, Ccover = r.CoverImageUrl })
                            .OrderByDescending(g => g.Max(x => x.AddedOn));

                        <div class="remarks-groups">
                            @foreach (var group in communityGroups)
                            {
                                <section class="remark-book-group" aria-label="Community remarks for @group.Key.BookTitle by @group.Key.BookAuthor">
                                    <header class="remark-group-header">
                                        <div class="remark-group-cover">
                                            <img src="@group.Key.Ccover" alt="@group.Key.BookTitle cover" loading="lazy" />
                                        </div>
                                        <div class="remark-group-meta">
                                            <h3 class="remark-group-title">@group.Key.BookTitle</h3>
                                            <p class="remark-group-author">@group.Key.BookAuthor</p>
                                        </div>
                                        <span class="remark-group-badge remark-group-badge--community" title="Community remarks">Community • @group.Count()</span>
                                    </header>
                                    <div class="remark-list">
                                        @foreach (var item in group)
                                        {
                                            <article class="remark-item">
                                                @if (!string.IsNullOrWhiteSpace(item.Title))
                                                {
                                                    <h4 class="remark-item-title">@item.Title</h4>
                                                }
                                                <p class="remark-item-content">@item.Content</p>
                                            </article>
                                        }
                                    </div>
                                </section>
                            }
                        </div>
                    }
                </section>
            </div>
        </section>

        <section id="explore-pane-quotes"
                 class="explore-top-panel"
                 role="tabpanel"
                 aria-labelledby="explore-tab-quotes"
                 data-explore-tab="quotes"
                 hidden>
            <div class="quotes-page">
                <header class="quotes-header">
                    <p class="quotes-kicker">Favorite Quotes</p>
                    <h1 class="quotes-title">Daily inspiration curated for you</h1>
                </header>

                <section class="quote-feature">
                    <h2 class="quote-section-heading">Quote of the Day</h2>
                    <article class="quote-hero"
                             style="@(string.IsNullOrEmpty(Model.QuoteOfTheDay.BackgroundImageUrl) ? null : $"background-image: url('{Model.QuoteOfTheDay.BackgroundImageUrl}')")">
                        <div class="quote-hero-overlay">
                            <svg class="quote-icon" width="36" height="36" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                                <path d="M8.5 5a3.5 3.5 0 1 1 0 7h-.25a.75.75 0 0 0-.75.75v.25A3.75 3.75 0 0 0 11.25 17h.25a.75.75 0 0 1 0 1.5h-.25A5.25 5.25 0 0 1 6 13.25V12a7 7 0 0 1 2.5-5.37V5zM17.5 5a3.5 3.5 0 1 1 0 7h-.25a.75.75 0 0 0-.75.75v.25A3.75 3.75 0 0 0 20.25 17h.25a.75.75 0 0 1 0 1.5h-.25A5.25 5.25 0 0 1 15 13.25V12a7 7 0 0 1 2.5-5.37V5z" fill="currentColor" />
                            </svg>
                            <blockquote class="quote-hero-text">@Model.QuoteOfTheDay.Text</blockquote>
                            @if (!string.IsNullOrWhiteSpace(Model.QuoteOfTheDay.Source))
                            {
                                <p class="quote-hero-source">@Model.QuoteOfTheDay.Source</p>
                            }
                            <footer class="quote-hero-footer">
                                <cite>@Model.QuoteOfTheDay.Author</cite>
                                <button type="button" class="quote-share" aria-label="Share quote of the day">
                                    <svg width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                                        <path d="M18 8.5a2.5 2.5 0 1 0-2.38-3.2l-7.01 3.5a2.5 2.5 0 0 0-1.61-.6A2.5 2.5 0 1 0 9.5 11c.57 0 1.09-.19 1.51-.5l6.98 3.49a2.5 2.5 0 1 0 .53-1.47l-6.99-3.49a2.5 2.5 0 0 0 .03-.53c0-.18-.02-.35-.06-.51l7-3.5c.37.31.84.51 1.35.51Z" fill="currentColor" />
                                    </svg>
                                </button>
                            </footer>
                        </div>
                    </article>
                </section>

                <section class="quotes-collection">
                    <div class="quotes-collection-header">
                        <h2 class="quote-section-heading">Quotes by Book</h2>
                        <p>Browse quotes grouped under their books. Click to collapse sections.</p>
                    </div>

                    <div class="quotes-by-book">
                        @if (!Model.GroupedQuotes.Any())
                        {
                            <p class="empty-hint">No additional quotes yet. Add more to see them grouped by book.</p>
                        }
                        else
                        {
                            @foreach (var group in Model.GroupedQuotes)
                            {
                            <details class="quote-book-group" open>
                                <summary class="quote-book-summary">
                                    <div class="quote-book-header">
                                        <div class="quote-book-cover">
                                            <img src="@group.CoverImageUrl" alt="@group.BookTitle cover" loading="lazy" />
                                        </div>
                                        <div class="quote-book-meta">
                                            <h3 class="quote-book-title">@group.BookTitle</h3>
                                            <p class="quote-book-author">@group.BookAuthor</p>
                                        </div>
                                        <span class="quote-count-badge" aria-label="Quotes count">@group.Quotes.Count</span>
                                    </div>
                                </summary>

                                <div class="quote-book-list quotes-grid">
                                    @foreach (var quote in group.Quotes)
                                    {
                                        <article class="quote-card">
                                            <svg class="quote-card-icon" width="28" height="28" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                                                <path d="M8.5 5a3.5 3.5 0 1 1 0 7h-.25a.75.75 0 0 0-.75.75v.25A3.75 3.75 0 0 0 11.25 17h.25a.75.75 0 0 1 0 1.5h-.25A5.25 5.25 0 0 1 6 13.25V12a7 7 0 0 1 2.5-5.37V5zM17.5 5a3.5 3.5 0 1 1 0 7h-.25a.75.75 0 0 0-.75.75v.25A3.75 3.75 0 0 0 20.25 17h.25a.75.75 0 0 1 0 1.5h-.25A5.25 5.25 0 0 1 15 13.25V12a7 7 0 0 1 2.5-5.37V5z" fill="currentColor" />
                                            </svg>
                                            <p class="quote-card-text">@quote.Text</p>
                                            <footer class="quote-card-footer">
                                                <cite>@quote.Author</cite>
                                                @if (!string.IsNullOrWhiteSpace(quote.Source))
                                                {
                                                    <span class="quote-card-source">@quote.Source</span>
                                                }
                                            </footer>
                                            <button type="button" class="quote-card-share" aria-label="Share quote from @quote.Author">
                                                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                                                    <path d="M18 8.5a2.5 2.5 0 1 0-2.38-3.2l-7.01 3.5a2.5 2.5 0 0 0-1.61-.6A2.5 2.5 0 1 0 9.5 11c.57 0 1.09-.19 1.51-.5l6.98 3.49a2.5 2.5 0 1 0 .53-1.47l-6.99-3.49a2.5 2.5 0 0 0 .03-.53c0-.18-.02-.35-.06-.51l7-3.5c.37.31.84.51 1.35.51Z" fill="currentColor" />
                                                </svg>
                                            </button>
                                        </article>
                                    }
                                </div>
                            </details>
                            }
                        }
                    </div>
                </section>
            </div>
        </section>

        <section id="explore-pane-recommendations"
                 class="explore-top-panel"
                 role="tabpanel"
                 aria-labelledby="explore-tab-recommendations"
                 data-explore-tab="recommendations"
                 hidden>
            <div class="recommendations-content">
                <header class="recommendations-intro">
                    <p class="recommendations-kicker">Curated For You</p>
                    <h1 class="recommendations-title">Discover what to read and watch next</h1>
                    <p class="recommendations-subtitle">New voices, epic sagas, and screen adaptations inspired by your shelf.</p>
                </header>

                <section class="recommendations-section">
                    <div class="recommendations-section-header">
                        <h2>Discover New Authors</h2>
                        <p>Fresh storytellers aligned with your recent reads.</p>
                    </div>
                    <div class="recommendation-grid recommendation-grid--authors">
                        @foreach (var author in Model.RecommendedAuthors)
                        {
                            <article class="recommendation-card recommendation-card--author">
                                <div class="recommendation-card-media">
                                    <img src="@author.ImageUrl"
                                         alt="@author.Name"
                                         loading="lazy"
                                         referrerpolicy="no-referrer"
                                         data-author-name="@author.Name" />
                                </div>
                                <div class="recommendation-card-body">
                                    <h3>@author.Name</h3>
                                    <p>@author.Description</p>
                                </div>
                            </article>
                        }
                    </div>
                </section>

                <section class="recommendations-section">
                    <div class="recommendations-section-header">
                        <h2>Book Series On Your Radar</h2>
                        <p>Pick up the next installment before it leaves the spotlight.</p>
                    </div>
                    <div class="recommendation-grid recommendation-grid--series">
                        @foreach (var series in Model.RecommendedSeries)
                        {
                            <article class="recommendation-card recommendation-card--series">
                                <div class="recommendation-card-media">
                                    <img src="@series.CoverUrl" alt="@series.Title @series.Installment" loading="lazy" />
                                </div>
                                <div class="recommendation-card-body">
                                    <h3>@series.Title</h3>
                                    <p>@series.Installment</p>
                                </div>
                            </article>
                        }
                    </div>
                </section>

                <section class="recommendations-section">
                    <div class="recommendations-section-header">
                        <h2>Screen Adaptations</h2>
                        <p>Binge-worthy picks based on beloved reads.</p>
                    </div>
                    <div class="recommendation-grid recommendation-grid--adaptations">
                        @foreach (var adaptation in Model.RecommendedAdaptations)
                        {
                            <article class="recommendation-card recommendation-card--adaptation">
                                <div class="recommendation-card-media">
                                    <img src="@adaptation.ImageUrl" alt="@adaptation.Title poster" loading="lazy" />
                                    <span class="recommendation-tag">@adaptation.Type</span>
                                </div>
                                <div class="recommendation-card-body">
                                    <h3>@adaptation.Title</h3>
                                </div>
                            </article>
                        }
                    </div>
                </section>
            </div>
        </section>

        <section id="explore-pane-bestsellers"
                 class="explore-top-panel"
                 role="tabpanel"
                 aria-labelledby="explore-tab-bestsellers"
                 data-explore-tab="bestsellers"
                 hidden>
            <div class="bestsellers-page">
                <header class="bestsellers-header">
                    <p class="bestsellers-kicker">Amazon Rankings</p>
                    <h1 class="bestsellers-title">Top Books of the Year</h1>
                </header>

                <section class="bestsellers-controls" aria-label="Year and category filters">
                    <div class="control-group">
                        <label for="bestsellers-year">Year</label>
                        <select id="bestsellers-year" aria-label="Select year">
                        </select>
                    </div>
                    <div class="control-group">
                        <label for="bestsellers-market">Region</label>
                        <select id="bestsellers-market" aria-label="Select region">
                            <option value="US" selected>United States</option>
                            <option value="GB">United Kingdom</option>
                            <option value="DE">Germany</option>
                            <option value="JP">Japan</option>
                        </select>
                    </div>
                </section>

                <section class="bestsellers-results" aria-live="polite">
                    <div class="bestsellers-grid" id="bestsellers-grid">
                        <!-- Cards injected via JS -->
                    </div>
                    <div class="bestsellers-empty" id="bestsellers-empty" hidden>
                        <p>No rankings available for the selected year.</p>
                    </div>
                </section>
            </div>
        </section>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const exploreTabs = Array.from(document.querySelectorAll('.explore-top-tab'));
            const explorePanels = Array.from(document.querySelectorAll('.explore-top-panel'));

            const syncPanels = (target) => {
                exploreTabs.forEach((btn) => {
                    const isActive = btn.dataset.exploreTab === target;
                    btn.classList.toggle('is-active', isActive);
                    btn.setAttribute('aria-selected', isActive ? 'true' : 'false');
                });

                explorePanels.forEach((panel) => {
                    const isActive = panel.dataset.exploreTab === target;
                    panel.classList.toggle('is-active', isActive);
                    if (isActive) {
                        panel.removeAttribute('hidden');
                    } else {
                        panel.setAttribute('hidden', 'hidden');
                    }
                });
            };

            const initialTab = exploreTabs.find((tab) => tab.classList.contains('is-active'))?.dataset.exploreTab ?? exploreTabs[0]?.dataset.exploreTab;
            if (initialTab) {
                syncPanels(initialTab);
                if (initialTab === 'recommendations') {
                    ensureRecommendationsLoaded();
                }
            }

            exploreTabs.forEach((tab) => {
                tab.addEventListener('click', () => {
                    const target = tab.dataset.exploreTab;
                    if (!target) {
                        return;
                    }

                    syncPanels(target);

                    if (target === 'bestsellers') {
                        ensureBestsellersLoaded();
                    }
                    if (target === 'recommendations') {
                        ensureRecommendationsLoaded();
                    }
                });
            });

            const authorButtons = Array.from(document.querySelectorAll('.author-button'));
            const panes = Array.from(document.querySelectorAll('.author-details-pane'));

            if (authorButtons.length && panes.length) {
                authorButtons.forEach((button) => {
                    button.addEventListener('click', () => {
                        const target = button.dataset.author;

                        authorButtons.forEach((btn) => {
                            const isCurrent = btn === button;
                            btn.setAttribute('aria-selected', isCurrent ? 'true' : 'false');
                            btn.parentElement?.classList.toggle('is-active', isCurrent);
                        });

                        panes.forEach((pane) => {
                            pane.classList.toggle('is-active', pane.dataset.author === target);
                        });
                    });
                });
            }

            function applyRecommendationAnimations(scope = document) {
                const recommendationCards = scope.querySelectorAll?.('.recommendation-card') ?? document.querySelectorAll('.recommendation-card');
                if (recommendationCards.length) {
                    recommendationCards.forEach((card, index) => {
                        card.style.setProperty('--enter-delay', `${index * 60}ms`);
                    });
                }
            }
            applyRecommendationAnimations();

            // Enhanced author profile interactions
            const authorTags = document.querySelectorAll('.author-tag, .author-link');
            authorTags.forEach(tag => {
                tag.addEventListener('mouseenter', () => {
                    tag.style.transform = 'translateY(-2px) scale(1.02)';
                });
                
                tag.addEventListener('mouseleave', () => {
                    tag.style.transform = 'translateY(0) scale(1)';
                });
            });

            // Animated entrance for author details
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.animation = 'fadeInUp 0.6s ease-out forwards';
                        observer.unobserve(entry.target);
                    }
                });
            }, observerOptions);

            // Observe author profile elements
            document.querySelectorAll('.author-profile, .author-identity-tags, .author-links').forEach(el => {
                observer.observe(el);
            });

            // Parallax effect for author avatars
            const authorAvatars = document.querySelectorAll('.author-avatar-frame');
            
            authorAvatars.forEach(avatar => {
                avatar.addEventListener('mousemove', (e) => {
                    const rect = avatar.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;
                    const centerX = rect.width / 2;
                    const centerY = rect.height / 2;
                    
                    const rotateX = (y - centerY) / 10;
                    const rotateY = (centerX - x) / 10;
                    
                    avatar.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(0)`;
                });
                
                avatar.addEventListener('mouseleave', () => {
                    avatar.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) translateZ(0)';
                });
            });

            // Trigger async avatar resolution (authors + recommendations)
            const placeholder = '/img/author-placeholder.svg';
            const wait = (ms) => new Promise(r => setTimeout(r, ms));
            const isPlaceholder = (src) => !src || src.endsWith('author-placeholder.svg');

            async function ensureAvatarFor(img) {
                const name = img.dataset.authorName;
                if (!name) return;

                const currentSrc = img.getAttribute('src') || '';
                const needsProfileRefresh = isPlaceholder(currentSrc);

                if (needsProfileRefresh) {
                    try {
                        await fetch(`/api/authors/refresh-avatar?name=${encodeURIComponent(name)}`, { method: 'POST' });
                    } catch (_) { /* ignore */ }
                }

                const tries = needsProfileRefresh ? 10 : 5;
                for (let attempt = 0; attempt < tries; attempt++) {
                    try {
                        const res = await fetch(`/api/authors/photo?name=${encodeURIComponent(name)}`, { cache: 'no-store' });
                        if (res.ok) {
                            const data = await res.json();
                            if (data && data.photoUrl && (!isPlaceholder(data.photoUrl) || needsProfileRefresh)) {
                                if (img.getAttribute('src') !== data.photoUrl) {
                                    img.setAttribute('src', data.photoUrl);
                                }
                                if (data.ready) break; // stop polling if cache is ready
                            }
                        }
                    } catch (_) { /* ignore */ }
                    await wait(1500);
                }
            }

            // Authors panel avatars
            document.querySelectorAll('.author-avatar-frame img[data-author-name]').forEach(img => {
                ensureAvatarFor(img);
            });
            // Recommendation author avatars
            document.querySelectorAll('.recommendation-card--author img[data-author-name]').forEach(img => {
                ensureAvatarFor(img);
            });

            // Recommendations (Series & Adaptations) — lazy loaded
            let recsLoaded = false;
            const seriesGrid = document.querySelector('.recommendation-grid--series');
            const adaptationsGrid = document.querySelector('.recommendation-grid--adaptations');

            function renderRecSkeleton(grid, count = 6, kind = 'series') {
                if (!grid) return;
                grid.innerHTML = '';
                for (let i = 0; i < count; i++) {
                    const card = document.createElement('article');
                    card.className = `recommendation-card recommendation-card--${kind}`;
                    card.innerHTML = `
                        <div class=\"recommendation-card-media\" style=\"background: var(--surface-raised, #f3f4f6); height: ${kind === 'adaptation' ? 320 : (kind === 'series' ? 260 : 220)}px; border-radius: 16px;\"></div>
                        <div class=\"recommendation-card-body\">
                            <h3 style=\"background:#e5e7eb;height:1.1rem;border-radius:6px;width:60%\"></h3>
                            <p style=\"background:#eef2f7;height:0.9rem;border-radius:6px;width:40%\"></p>
                        </div>`;
                    grid.appendChild(card);
                }
                applyRecommendationAnimations(grid);
            }

            async function loadSeries() {
                if (!seriesGrid) return;
                renderRecSkeleton(seriesGrid, 6, 'series');
                try {
                    const res = await fetch('/api/recommendations/series');
                    if (!res.ok) throw new Error('Failed to load series');
                    const items = await res.json();
                    seriesGrid.innerHTML = '';
                    (items || []).forEach((s) => {
                        const card = document.createElement('article');
                        card.className = 'recommendation-card recommendation-card--series';
                        const cover = s.coverUrl || '/img/book-placeholder.svg';
                        card.innerHTML = `
                            <div class=\"recommendation-card-media\">\n                                <img src=\"${cover}\" alt=\"${s.title ?? ''} ${s.installment ?? ''}\" loading=\"lazy\" />\n                            </div>
                            <div class=\"recommendation-card-body\">\n                                <h3>${s.title ?? ''}</h3>\n                                <p>${s.installment ?? ''}</p>\n                            </div>`;
                        seriesGrid.appendChild(card);
                    });
                    applyRecommendationAnimations(seriesGrid);
                } catch (_) {
                    seriesGrid.innerHTML = '<p>Failed to load series suggestions.</p>';
                }
            }

            async function loadAdaptations() {
                if (!adaptationsGrid) return;
                renderRecSkeleton(adaptationsGrid, 6, 'adaptation');
                try {
                    const res = await fetch('/api/recommendations/adaptations');
                    if (!res.ok) throw new Error('Failed to load adaptations');
                    const items = await res.json();
                    adaptationsGrid.innerHTML = '';
                    (items || []).forEach((a) => {
                        const card = document.createElement('article');
                        card.className = 'recommendation-card recommendation-card--adaptation';
                        const image = a.imageUrl || '/img/book-placeholder.svg';
                        const type = a.type || '';
                        card.innerHTML = `
                            <div class=\"recommendation-card-media\">\n                                <img src=\"${image}\" alt=\"${a.title ?? ''} poster\" loading=\"lazy\" />\n                                ${type ? `<span class=\"recommendation-tag\">${type}</span>` : ''}\n                            </div>
                            <div class=\"recommendation-card-body\">\n                                <h3>${a.title ?? ''}</h3>\n                            </div>`;
                        adaptationsGrid.appendChild(card);
                    });
                    applyRecommendationAnimations(adaptationsGrid);
                } catch (_) {
                    adaptationsGrid.innerHTML = '<p>Failed to load screen adaptations.</p>';
                }
            }

            function ensureRecommendationsLoaded() {
                if (recsLoaded) return;
                recsLoaded = true;
                loadSeries();
                loadAdaptations();
            }

            // Yearly Bestsellers panel logic
            let bestsellersLoaded = false;
            const yearSelect = document.getElementById('bestsellers-year');
            const marketSelect = document.getElementById('bestsellers-market');
            const grid = document.getElementById('bestsellers-grid');
            const emptyState = document.getElementById('bestsellers-empty');

            function buildYearOptions() {
                if (!yearSelect) return;
                const now = new Date();
                const currentYear = now.getFullYear();
                const startYear = currentYear;
                const minYear = currentYear - 9; // last 10 years
                yearSelect.innerHTML = '';
                for (let y = startYear; y >= minYear; y--) {
                    const opt = document.createElement('option');
                    opt.value = String(y);
                    opt.textContent = String(y);
                    if (y === currentYear) opt.selected = true;
                    yearSelect.appendChild(opt);
                }
            }

            function renderSkeleton(count = 8) {
                grid.innerHTML = '';
                emptyState.setAttribute('hidden', 'hidden');
                for (let i = 0; i < count; i++) {
                    const card = document.createElement('article');
                    card.className = 'bestseller-card is-loading';
                    card.innerHTML = `
                        <div class="bestseller-rank"></div>
                        <div class="bestseller-cover"></div>
                        <div class="bestseller-info">
                            <div class="line line-1"></div>
                            <div class="line line-2"></div>
                        </div>`;
                    grid.appendChild(card);
                }
            }

            function renderBestsellers(items) {
                grid.innerHTML = '';
                if (!items || !items.length) {
                    emptyState.removeAttribute('hidden');
                    return;
                }
                emptyState.setAttribute('hidden', 'hidden');

                items.forEach(item => {
                    const card = document.createElement('article');
                    card.className = 'bestseller-card';
                    const cover = item.coverImageUrl || '/img/book-placeholder.svg';
                    const rank = item.rank ?? '';
                    const rating = (item.rating != null) ? ` • ${item.rating.toFixed(1)}★` : '';
                    const ratingsCount = (item.ratingsCount != null) ? ` (${item.ratingsCount.toLocaleString()})` : '';
                    const author = item.author ? ` — ${item.author}` : '';
                    const titleHtml = item.amazonUrl
                        ? `<a href="${item.amazonUrl}" target="_blank" rel="noopener noreferrer">${item.title}</a>`
                        : item.title;
                    card.innerHTML = `
                        <div class="bestseller-rank">#${rank}</div>
                        <div class="bestseller-cover"><img src="${cover}" alt="${item.title} cover" loading="lazy" /></div>
                        <div class="bestseller-info">
                            <h3 class="bestseller-title">${titleHtml}</h3>
                            <p class="bestseller-meta">${author}${rating}${ratingsCount}</p>
                        </div>`;
                    grid.appendChild(card);
                });
            }

            async function loadBestsellers(year, market) {
                renderSkeleton();
                try {
                    const res = await fetch(`/api/rankings/annual?year=${encodeURIComponent(year)}&market=${encodeURIComponent(market)}`);
                    if (!res.ok) throw new Error('Failed to load rankings');
                    const data = await res.json();
                    renderBestsellers(data?.items ?? []);
                } catch (err) {
                    grid.innerHTML = '';
                    emptyState.removeAttribute('hidden');
                }
            }

            function ensureBestsellersLoaded() {
                if (bestsellersLoaded) return;
                buildYearOptions();
                const year = yearSelect?.value || String(new Date().getFullYear());
                const market = marketSelect?.value || 'US';
                loadBestsellers(year, market);
                bestsellersLoaded = true;
            }

            if (yearSelect && marketSelect) {
                yearSelect.addEventListener('change', () => {
                    loadBestsellers(yearSelect.value, marketSelect.value);
                });
                marketSelect.addEventListener('change', () => {
                    loadBestsellers(yearSelect.value, marketSelect.value);
                });
            }
            // If the bestsellers tab is active on initial load
            if (document.querySelector('#explore-pane-bestsellers')?.classList.contains('is-active')) {
                ensureBestsellersLoaded();
            }
        });
    </script>

    <style>
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .author-profile,
        .author-identity-tags,
        .author-links {
            opacity: 0;
        }

        .author-tag,
        .author-link {
            transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .author-avatar-frame {
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        /* Yearly Bestsellers styles */
        .bestsellers-page {
            width: min(var(--layout-max-width), 94%);
            margin: 0 auto;
            padding: 2rem 0 3.5rem;
        }
        .bestsellers-header { text-align: center; margin-bottom: 2rem; }
        .bestsellers-kicker {
            font-size: 0.95rem; text-transform: uppercase; letter-spacing: 0.18em;
            color: var(--brand-600); font-weight: 700; margin-bottom: 0.6rem;
        }
        .bestsellers-title { font-size: clamp(2rem, 4vw, 3rem); margin: 0; color: var(--gray-900); }
        .bestsellers-controls { display: flex; gap: 1rem; align-items: center; margin: 1rem 0 1.5rem; }
        .control-group { background: var(--surface); padding: 0.75rem 1rem; border-radius: 12px; box-shadow: 0 12px 24px rgba(15,23,42,.06); display: flex; gap: .5rem; align-items: center; }
        .control-group label { font-weight: 600; color: var(--gray-600); }
        .control-group select { border: 0; background: transparent; font-weight: 600; color: var(--gray-900); }
        .bestsellers-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap: 1.25rem; }
        .bestseller-card { background: var(--surface); border-radius: 16px; padding: 0.9rem; box-shadow: 0 18px 30px rgba(15,23,42,.08); display: grid; grid-template-columns: auto 1fr; grid-template-rows: auto auto; grid-template-areas: 'rank title' 'cover meta'; column-gap: .9rem; align-items: center; }
        .bestseller-card .bestseller-rank { grid-area: rank; font-weight: 800; color: var(--brand-600); font-size: 1.1rem; }
        .bestseller-card .bestseller-cover { grid-area: cover; }
        .bestseller-card .bestseller-cover img { width: 120px; aspect-ratio: 3/4; border-radius: 12px; object-fit: cover; box-shadow: 0 14px 22px rgba(15,23,42,.12); }
        .bestseller-card .bestseller-info { grid-area: meta; }
        .bestseller-card .bestseller-title { margin: 0; font-size: 1rem; color: var(--gray-900); grid-area: title; }
        .bestseller-card .bestseller-title a { color: inherit; text-decoration: none; }
        .bestseller-card .bestseller-title a:hover { text-decoration: underline; }
        .bestseller-card .bestseller-meta { margin: .35rem 0 0; color: var(--gray-600); font-size: .95rem; }
        .bestsellers-empty { text-align: center; color: var(--gray-600); padding: 2rem 0; }

        /* Skeleton state */
        .bestseller-card.is-loading { display: grid; grid-template-columns: 1fr 2fr; grid-template-areas: 'cover info'; gap: 1rem; animation: pulse 1.2s ease-in-out infinite; }
        .bestseller-card.is-loading .bestseller-rank { display: none; }
        .bestseller-card.is-loading .bestseller-cover { grid-area: cover; width: 120px; height: 160px; border-radius: 12px; background: var(--gray-200); }
        .bestseller-card.is-loading .bestseller-info { grid-area: info; }
        .bestseller-card.is-loading .line { height: 12px; background: var(--gray-200); border-radius: 6px; }
        .bestseller-card.is-loading .line-1 { width: 70%; margin-bottom: .5rem; }
        .bestseller-card.is-loading .line-2 { width: 50%; }

        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: .6; }
            100% { opacity: 1; }
        }

        /* Remarks styles */
        .remarks-page { width: min(var(--layout-max-width), 94%); margin: 0 auto; padding: 2rem 0 3.5rem; }
        .remarks-header { text-align: center; margin-bottom: 1.75rem; }
        .remarks-kicker { font-size: 0.95rem; text-transform: uppercase; letter-spacing: 0.18em; color: var(--brand-600); font-weight: 700; margin-bottom: .6rem; }
        .remarks-title { font-size: clamp(2rem, 4vw, 3rem); margin: 0; color: var(--gray-900); }
        .remarks-collection { margin-top: 1.5rem; }
        .remarks-collection-header { display: flex; align-items: baseline; justify-content: space-between; margin-bottom: .75rem; }
        .remarks-section-heading { margin: 0; font-size: 1.15rem; color: var(--gray-900); }

        /* Grouped remarks layout */
        .remarks-groups { display: grid; grid-template-columns: 1fr; gap: 1rem; }
        .remark-book-group { background: var(--surface); border-radius: 16px; padding: 1rem; box-shadow: 0 12px 24px rgba(15,23,42,.06); }
        .remark-group-header { display: grid; grid-template-columns: auto 1fr auto; gap: .75rem; align-items: center; margin-bottom: .5rem; }
        .remark-group-cover img { width: 72px; height: 96px; object-fit: cover; border-radius: 10px; box-shadow: 0 10px 18px rgba(15,23,42,.08); }
        .remark-group-title { margin: 0; font-size: 1.05rem; color: var(--gray-900); }
        .remark-group-author { margin: .15rem 0 0; color: var(--gray-600); font-size: .95rem; }
        .remark-group-badge { background: var(--brand-50); color: var(--brand-700); font-weight: 700; padding: .25rem .6rem; border-radius: 999px; font-size: .85rem; white-space: nowrap; }
        .remark-group-badge--community { background: var(--gray-200); color: var(--gray-800); }

        .remark-list { display: grid; grid-template-columns: 1fr; }
        .remark-item { padding: .6rem .25rem; border-top: 1px solid var(--gray-200); }
        .remark-item:first-child { border-top: 0; }
        .remark-item-title { margin: 0 0 .25rem; font-size: .95rem; color: var(--gray-800); font-weight: 700; }
        .remark-item-content { margin: 0; color: var(--gray-800); line-height: 1.5; font-size: .95rem; }

        /* Legacy (previous) card layout: keep for compatibility, no longer used here */
        .remarks-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap: 1rem; }
        .remark-card { display: grid; grid-template-columns: 92px 1fr; gap: .75rem; background: var(--surface); border-radius: 14px; padding: .75rem; box-shadow: 0 10px 20px rgba(15,23,42,.06); }
        .remark-media img { width: 92px; height: 128px; object-fit: cover; border-radius: 10px; box-shadow: 0 10px 18px rgba(15,23,42,.08); }
        .remark-book-title { margin: 0; font-size: 1rem; color: var(--gray-900); }
        .remark-book-author { margin: .2rem 0 .4rem; color: var(--gray-600); font-size: .95rem; }
        .remark-content { margin: .25rem 0 .5rem; color: var(--gray-800); line-height: 1.4; font-size: .95rem; }
        .remark-footer { display: flex; gap: .5rem; align-items: center; color: var(--gray-600); font-size: .85rem; }
        .remark-badge { background: var(--brand-50); color: var(--brand-700); font-weight: 600; padding: .15rem .5rem; border-radius: 999px; }
        .remark-badge--community { background: var(--gray-200); color: var(--gray-800); }
        .remark-title { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 16rem; }
    </style>
}
