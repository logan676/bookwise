@page
@model AddBookModel
@{
    ViewData["Title"] = "Add Book";
}

<div class="search-page-container">
    <!-- Search Bar -->
    <div class="search-section">
        <div class="search-bar-container">
            <div class="search-input-wrapper">
                <svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="11" cy="11" r="8"/>
                    <path d="m21 21-4.35-4.35"/>
                </svg>
                <input type="search" 
                       id="book-search" 
                       placeholder="Search for a book by title or author..." 
                       class="search-input" 
                       autocomplete="off" />
                <button type="button" class="search-submit" id="execute-search">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="11" cy="11" r="8"/>
                        <path d="m21 21-4.35-4.35"/>
                    </svg>
                    Search
                </button>
            </div>
        </div>
    </div>

    <!-- Empty State (shown when no search) -->
    <div class="empty-state-container" id="empty-state">
        <div class="empty-state-content">
            <div class="book-icon">
                <svg viewBox="0 0 64 64" fill="none">
                    <path d="M10 16C10 12.6863 12.6863 10 16 10H32C35.3137 10 38 12.6863 38 16V52C38 55.3137 35.3137 58 32 58H16C12.6863 58 10 55.3137 10 52V16Z" fill="#E2F2FF"/>
                    <path d="M54 16C54 12.6863 51.3137 10 48 10H32C28.6863 10 26 12.6863 26 16V52C26 55.3137 28.6863 58 32 58H48C51.3137 58 54 55.3137 54 52V16Z" fill="#B8E0FF"/>
                    <path d="M21 24H30" stroke="#0D6EFD" stroke-width="3" stroke-linecap="round"/>
                    <path d="M21 34H30" stroke="#0D6EFD" stroke-width="3" stroke-linecap="round"/>
                    <path d="M34 24H43" stroke="#0D6EFD" stroke-width="3" stroke-linecap="round"/>
                    <path d="M34 34H43" stroke="#0D6EFD" stroke-width="3" stroke-linecap="round"/>
                </svg>
            </div>
            <h2>Add a new book to your library</h2>
            <p>Start by searching for a book by its title or author in the search bar above. We'll find it for you!</p>
            <button type="button" class="start-searching-btn" id="start-searching">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="11" cy="11" r="8"/>
                    <path d="m21 21-4.35-4.35"/>
                </svg>
                Start Searching
            </button>
        </div>
    </div>

    <!-- Search Results -->
    <div class="search-results-container" id="search-results" style="display: none;">
        <h2 class="search-results-title">Search Results</h2>
        <div id="search-feedback" class="search-feedback" style="display: none;"></div>
        <div class="search-results-list" id="results-list">
            <!-- Results will be populated by JavaScript -->
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Search functionality
        const searchInput = document.getElementById('book-search');
        const searchButton = document.getElementById('execute-search');
        const emptyState = document.getElementById('empty-state');
        const searchResults = document.getElementById('search-results');
        const resultsList = document.getElementById('results-list');
        const startSearchingBtn = document.getElementById('start-searching');
        const searchFeedback = document.getElementById('search-feedback');
        const placeholderCover = 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent('<svg xmlns="http://www.w3.org/2000/svg" width="60" height="90"><rect width="100%" height="100%" fill="#e2e8f0"/><text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-family="Arial, sans-serif" font-size="9" fill="#64748b">No Cover</text></svg>');

        startSearchingBtn?.addEventListener('click', () => {
            searchInput.focus();
        });

        searchInput.addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault();
                handleSearch();
            }
        });

        searchInput.addEventListener('input', () => {
            if (!searchInput.value.trim()) {
                showEmptyState();
            }
        });

        searchButton.addEventListener('click', handleSearch);

        resultsList.addEventListener('click', (event) => {
            const button = event.target.closest('.add-book-btn');
            if (!button) {
                return;
            }

            const { title, author } = button.dataset;
            addBook(title ?? '', author ?? '');
        });

        function showEmptyState() {
            emptyState.style.display = 'block';
            searchResults.style.display = 'none';
            resultsList.innerHTML = '';
            setFeedback('');
        }

        function setFeedback(message, state) {
            if (!message) {
                searchFeedback.style.display = 'none';
                searchFeedback.textContent = '';
                searchFeedback.className = 'search-feedback';
                return;
            }

            const classes = ['search-feedback'];
            if (state) {
                classes.push(state);
            }

            searchFeedback.className = classes.join(' ');
            searchFeedback.textContent = message;
            searchFeedback.style.display = 'block';
        }

        async function handleSearch() {
            const query = searchInput.value.trim();
            if (!query) {
                showEmptyState();
                return;
            }

            searchButton.disabled = true;
            emptyState.style.display = 'none';
            searchResults.style.display = 'block';
            resultsList.innerHTML = '';
            setFeedback('Searching for books...');

            try {
                const response = await fetch('/api/book-search', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ query })
                });

                if (!response.ok) {
                    throw new Error('Search request failed');
                }

                const data = await response.json();
                const books = Array.isArray(data.books) ? data.books : [];

                if (books.length === 0) {
                    setFeedback('No matching books found. Try a different keyword.', 'error');
                    return;
                }

                setFeedback(`Showing ${books.length} suggestion${books.length === 1 ? '' : 's'}.`, 'success');
                renderResults(books);
            } catch (error) {
                setFeedback('There was an issue fetching suggestions. Please try again.', 'error');
            } finally {
                searchButton.disabled = false;
            }
        }

        function renderResults(results) {
            const html = results.map((book) => {
                const title = escapeHtml(book.title ?? 'Untitled');
                const author = escapeHtml(book.author ?? 'Unknown author');
                const metaParts = [];

                if (book.published) {
                    metaParts.push(`Published: ${escapeHtml(book.published)}`);
                }

                if (book.language) {
                    metaParts.push(`Language: ${escapeHtml(book.language)}`);
                }

                const metadata = metaParts.length > 0
                    ? `<p class="book-details">${metaParts.join(' | ')}</p>`
                    : '';

                const description = book.description
                    ? `<p class="book-details">${escapeHtml(book.description)}</p>`
                    : '';

                const cover = book.coverImageUrl
                    ? escapeAttribute(book.coverImageUrl)
                    : placeholderCover;

                return `
                    <div class="search-result-item">
                        <div class="book-cover">
                            <img src="${cover}" alt="${title}" />
                        </div>
                        <div class="book-info">
                            <h3 class="book-title">${title}</h3>
                            <p class="book-author">by ${author}</p>
                            ${metadata}
                            ${description}
                        </div>
                        <button class="add-book-btn" data-title="${escapeAttribute(book.title ?? '')}" data-author="${escapeAttribute(book.author ?? '')}">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <line x1="12" y1="5" x2="12" y2="19"></line>
                                <line x1="5" y1="12" x2="19" y2="12"></line>
                            </svg>
                            Add
                        </button>
                    </div>
                `;
            }).join('');

            resultsList.innerHTML = html;
        }

        function escapeHtml(value) {
            if (value === undefined || value === null) {
                return '';
            }

            return String(value).replace(/[&<>"']/g, (char) => {
                switch (char) {
                    case '&':
                        return '&amp;';
                    case '<':
                        return '&lt;';
                    case '>':
                        return '&gt;';
                    case '"':
                        return '&quot;';
                    case "'":
                        return '&#39;';
                    default:
                        return char;
                }
            });
        }

        function escapeAttribute(value) {
            return escapeHtml(value ?? '');
        }

        function addBook(title, author) {
            alert(`Added "${title}" by ${author} to your library!`);
            window.location.href = '/';
        }

        showEmptyState();
    </script>
}
