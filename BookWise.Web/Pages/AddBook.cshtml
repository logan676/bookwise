@page
@model AddBookModel
@{
    ViewData["Title"] = "Add Book";
}

<div class="search-page-container">
    <!-- Search Bar -->
    <div class="search-section">
        <div class="search-bar-container">
            <div class="search-input-wrapper">
                <svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="11" cy="11" r="8"/>
                    <path d="m21 21-4.35-4.35"/>
                </svg>
                <input type="search" 
                       id="book-search" 
                       placeholder="Search for a book by title or author..." 
                       class="search-input" 
                       autocomplete="off" />
                <button type="button" class="clear-search" id="clear-search" style="display: none;">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Empty State (shown when no search) -->
    <div class="empty-state-container" id="empty-state">
        <div class="empty-state-content">
            <div class="book-icon">
                <svg viewBox="0 0 64 64" fill="none">
                    <path d="M10 16C10 12.6863 12.6863 10 16 10H32C35.3137 10 38 12.6863 38 16V52C38 55.3137 35.3137 58 32 58H16C12.6863 58 10 55.3137 10 52V16Z" fill="#E2F2FF"/>
                    <path d="M54 16C54 12.6863 51.3137 10 48 10H32C28.6863 10 26 12.6863 26 16V52C26 55.3137 28.6863 58 32 58H48C51.3137 58 54 55.3137 54 52V16Z" fill="#B8E0FF"/>
                    <path d="M21 24H30" stroke="#0D6EFD" stroke-width="3" stroke-linecap="round"/>
                    <path d="M21 34H30" stroke="#0D6EFD" stroke-width="3" stroke-linecap="round"/>
                    <path d="M34 24H43" stroke="#0D6EFD" stroke-width="3" stroke-linecap="round"/>
                    <path d="M34 34H43" stroke="#0D6EFD" stroke-width="3" stroke-linecap="round"/>
                </svg>
            </div>
            <h2>Add a new book to your library</h2>
            <p>Start by searching for a book by its title or author in the search bar above. We'll find it for you!</p>
            <button type="button" class="start-searching-btn" id="start-searching">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="11" cy="11" r="8"/>
                    <path d="m21 21-4.35-4.35"/>
                </svg>
                Start Searching
            </button>
        </div>
    </div>

    <!-- Search Results -->
    <div class="search-results-container" id="search-results" style="display: none;">
        <h2 class="search-results-title">Search Results</h2>
        <div class="search-results-list" id="results-list">
            <!-- Results will be populated by JavaScript -->
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Search functionality
        const searchInput = document.getElementById('book-search');
        const clearButton = document.getElementById('clear-search');
        const emptyState = document.getElementById('empty-state');
        const searchResults = document.getElementById('search-results');
        const resultsList = document.getElementById('results-list');
        const startSearchingBtn = document.getElementById('start-searching');

        // Sample search results data
        const sampleResults = [
            {
                title: "The Secret Garden",
                author: "Frances Hodgson Burnett",
                published: "1911",
                language: "English",
                cover: "https://images.unsplash.com/photo-1544947950-fa07a98d237f?w=200&h=300&fit=crop"
            },
            {
                title: "秘密花园",
                author: "Li Wei",
                published: "2005",
                language: "Chinese",
                cover: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=300&fit=crop"
            },
            {
                title: "The Secret Garden: A Graphic Novel",
                author: "Mariah Marsden",
                published: "2021",
                language: "English",
                cover: "https://images.unsplash.com/photo-1518373714866-3f1478910cc0?w=200&h=300&fit=crop"
            },
            {
                title: "Return to the Secret Garden",
                author: "Holly Webb",
                published: "2011",
                language: "English",
                cover: "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=200&h=300&fit=crop"
            },
            {
                title: "秘密花园：图画版",
                author: "Johanna Basford",
                published: "2015",
                language: "Chinese",
                cover: "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=200&h=300&fit=crop"
            }
        ];

        searchInput.addEventListener('input', (e) => {
            const value = e.target.value.trim();
            
            if (value.length > 0) {
                clearButton.style.display = 'block';
                showSearchResults(value);
            } else {
                clearButton.style.display = 'none';
                showEmptyState();
            }
        });

        clearButton.addEventListener('click', () => {
            searchInput.value = '';
            clearButton.style.display = 'none';
            showEmptyState();
            searchInput.focus();
        });

        startSearchingBtn.addEventListener('click', () => {
            searchInput.focus();
        });

        function showEmptyState() {
            emptyState.style.display = 'block';
            searchResults.style.display = 'none';
        }

        function showSearchResults(query) {
            emptyState.style.display = 'none';
            searchResults.style.display = 'block';
            
            // Filter results based on query (simple simulation)
            const filteredResults = sampleResults.filter(book => 
                book.title.toLowerCase().includes(query.toLowerCase()) ||
                book.author.toLowerCase().includes(query.toLowerCase())
            );
            
            renderResults(filteredResults);
        }

        function renderResults(results) {
            resultsList.innerHTML = results.map(book => `
                <div class="search-result-item">
                    <div class="book-cover">
                        <img src="${book.cover}" alt="${book.title}" />
                    </div>
                    <div class="book-info">
                        <h3 class="book-title">${book.title}</h3>
                        <p class="book-author">by ${book.author}</p>
                        <p class="book-details">Published: ${book.published} | Language: ${book.language}</p>
                    </div>
                    <button class="add-book-btn" onclick="addBook('${book.title}', '${book.author}')">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <line x1="12" y1="5" x2="12" y2="19"></line>
                            <line x1="5" y1="12" x2="19" y2="12"></line>
                        </svg>
                        Add
                    </button>
                </div>
            `).join('');
        }

        function addBook(title, author) {
            // Simulate adding the book
            alert(`Added "${title}" by ${author} to your library!`);
            // In a real app, this would make an API call to add the book
            // Then redirect back to the main page
            window.location.href = '/';
        }
    </script>
}