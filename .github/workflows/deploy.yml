name: Deploy to Azure (Staging ➜ Prod)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write   # required for OIDC

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  DOTNET_VERSION: '8.0.x'
  AZURE_WEBAPP_NAME: ${{ vars.AZURE_WEBAPP_NAME }}
  AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
  AZURE_SLOT_NAME: staging
  HEALTH_CHECK_PATH: /healthz

jobs:
  deploy:
    name: Deploy to Azure App Service (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Setup .NET SDK (prefer cache when packages.lock.json exists)
      - name: Setup .NET SDK (with cache)
        if: ${{ hashFiles('**/packages.lock.json') != '' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: '**/packages.lock.json'

      - name: Setup .NET SDK (no cache)
        if: ${{ hashFiles('**/packages.lock.json') == '' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore, Build, Publish
        run: |
          dotnet restore BookWise.sln
          dotnet build BookWise.sln --configuration Release --no-restore
          dotnet publish BookWise.Web/BookWise.Web.csproj --configuration Release -o ./publish
          cd publish
          zip -r ../package.zip .
          cd -

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Validate inputs
        shell: bash
        run: |
          : "Ensure required variables are present"
          test -n "${AZURE_WEBAPP_NAME}" || { echo "Missing vars.AZURE_WEBAPP_NAME" >&2; exit 1; }
          test -n "${AZURE_RESOURCE_GROUP}" || { echo "Missing vars.AZURE_RESOURCE_GROUP" >&2; exit 1; }
          test -n "${AZURE_SLOT_NAME}" || { echo "Missing AZURE_SLOT_NAME env" >&2; exit 1; }
          test -f package.zip || { echo "package.zip not found" >&2; ls -la; exit 1; }

      - name: Ensure staging slot exists
        shell: bash
        run: |
          set -e
          if az webapp deployment slot show \
            --resource-group "${AZURE_RESOURCE_GROUP}" \
            --name "${AZURE_WEBAPP_NAME}" \
            --slot "${AZURE_SLOT_NAME}" >/dev/null 2>&1; then
            echo "Slot ${AZURE_SLOT_NAME} already exists"
          else
            echo "Creating slot ${AZURE_SLOT_NAME} (copy config from production)"
            az webapp deployment slot create \
              --resource-group "${AZURE_RESOURCE_GROUP}" \
              --name "${AZURE_WEBAPP_NAME}" \
              --slot "${AZURE_SLOT_NAME}" \
              --configuration-source "${AZURE_WEBAPP_NAME}"
          fi

      # Robust health-check configuration with fallback for older az versions
      - name: Configure health check path (prod + staging)
        shell: bash
        run: |
          set -e
          echo "Configuring health check path to ${HEALTH_CHECK_PATH} (prod + slot)"
          set +e
          az webapp config set \
            --resource-group "${AZURE_RESOURCE_GROUP}" \
            --name "${AZURE_WEBAPP_NAME}" \
            --generic-configurations "{\"healthCheckPath\":\"${HEALTH_CHECK_PATH}\"}"
          PROD_RC=$?
          az webapp config set \
            --resource-group "${AZURE_RESOURCE_GROUP}" \
            --name "${AZURE_WEBAPP_NAME}" \
            --slot "${AZURE_SLOT_NAME}" \
            --generic-configurations "{\"healthCheckPath\":\"${HEALTH_CHECK_PATH}\"}"
          STG_RC=$?
          set -e
          if [ $PROD_RC -ne 0 ]; then
            echo "generic-configurations failed for prod; falling back to ARM patch"
            az resource update \
              --resource-group "${AZURE_RESOURCE_GROUP}" \
              --resource-type "Microsoft.Web/sites/config" \
              --name "${AZURE_WEBAPP_NAME}/web" \
              --set properties.healthCheckPath="${HEALTH_CHECK_PATH}"
          fi
          if [ $STG_RC -ne 0 ]; then
            echo "generic-configurations failed for slot; falling back to ARM patch"
            az resource update \
              --resource-group "${AZURE_RESOURCE_GROUP}" \
              --resource-type "Microsoft.Web/sites/slots/config" \
              --name "${AZURE_WEBAPP_NAME}/${AZURE_SLOT_NAME}/web" \
              --set properties.healthCheckPath="${HEALTH_CHECK_PATH}"
          fi
          echo "Verifying health check configuration..."
          echo "Prod healthCheckPath: $(az webapp config show -g "${AZURE_RESOURCE_GROUP}" -n "${AZURE_WEBAPP_NAME}" --query healthCheckPath -o tsv || echo '-')"
          echo "Slot healthCheckPath: $(az webapp config show -g "${AZURE_RESOURCE_GROUP}" -n "${AZURE_WEBAPP_NAME}" --slot "${AZURE_SLOT_NAME}" --query healthCheckPath -o tsv || echo '-')"

      # (Optional but recommended) Keep app warm and responsive
      - name: Ensure Always On (prod + staging)
        shell: bash
        run: |
          az webapp config set -g "${AZURE_RESOURCE_GROUP}" -n "${AZURE_WEBAPP_NAME}" --always-on true
          az webapp config set -g "${AZURE_RESOURCE_GROUP}" -n "${AZURE_WEBAPP_NAME}" --slot "${AZURE_SLOT_NAME}" --always-on true

      - name: Deploy to staging slot (zip)
        run: |
          az webapp deploy \
            --resource-group "${AZURE_RESOURCE_GROUP}" \
            --name "${AZURE_WEBAPP_NAME}" \
            --slot "${AZURE_SLOT_NAME}" \
            --type zip \
            --src-path package.zip \
            --target-path site/wwwroot \
            --async false

      # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      # From here: dynamic host discovery + reliable warmup/probe
      # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      - name: Get WebApp hostnames (prod + staging)
        id: host
        shell: bash
        run: |
          set -e
          PROD_HOST=$(az webapp show -g "${AZURE_RESOURCE_GROUP}" -n "${AZURE_WEBAPP_NAME}" --query defaultHostName -o tsv)
          STG_HOST=$(az webapp show -g "${AZURE_RESOURCE_GROUP}" -n "${AZURE_WEBAPP_NAME}" --slot "${AZURE_SLOT_NAME}" --query defaultHostName -o tsv)
          echo "prod_url=https://$PROD_HOST" >> "$GITHUB_OUTPUT"
          echo "stg_url=https://$STG_HOST" >> "$GITHUB_OUTPUT"
          echo "Prod URL: https://$PROD_HOST"
          echo "Staging URL: https://$STG_HOST"

      - name: Ensure staging slot is started
        shell: bash
        run: |
          STATE=$(az webapp show -g "${AZURE_RESOURCE_GROUP}" -n "${AZURE_WEBAPP_NAME}" --slot "${AZURE_SLOT_NAME}" --query state -o tsv || echo "")
          if [ "$STATE" != "Running" ]; then
            echo "Slot state=$STATE, starting..."
            az webapp start -g "${AZURE_RESOURCE_GROUP}" -n "${AZURE_WEBAPP_NAME}" --slot "${AZURE_SLOT_NAME}"
          fi

      - name: Warm up and health check (staging)
        shell: bash
        run: |
          set -e
          BASE="${{ steps.host.outputs.stg_url }}"
          HC="${HEALTH_CHECK_PATH}"
          URL="$BASE$HC"
          echo "Probing primary: $URL"
          # Retry up to ~6 minutes, 2-3s interval. Force IPv4 to avoid rare IPv6 quirks.
          ATTEMPTS=120
          for i in $(seq 1 $ATTEMPTS); do
            if curl -4 -Ssf --connect-timeout 5 "$URL" -D - -o /dev/null; then
              echo "Staging healthy on $HC (HTTP 200)"
              exit 0
            fi
            # If explicit 404, try root as a fallback to detect app liveness
            STATUS=$(curl -4 -s -o /dev/null -w "%{http_code}" --connect-timeout 5 "$URL" || echo "000")
            if [ "$STATUS" = "404" ]; then
              ROOT_STATUS=$(curl -4 -s -o /dev/null -w "%{http_code}" --connect-timeout 5 "$BASE/" || echo "000")
              if [ "$ROOT_STATUS" = "200" ]; then
                echo "App is up (/) but $HC returns 404. Proceeding."
                exit 0
              fi
            fi
            if (( i % 10 == 0 )); then echo "Waiting... (~$((i*3))s)"; fi
            sleep 3
          done
          echo "Staging slot failed health check" >&2
          echo "Verbose curl for debugging (health endpoint):"
          curl -4 -v "$URL" || true
          echo "Verbose curl for debugging (root):"
          curl -4 -v "$BASE/" || true
          echo "Access restrictions (if any):"
          az webapp config access-restriction show -g "${AZURE_RESOURCE_GROUP}" -n "${AZURE_WEBAPP_NAME}" --slot "${AZURE_SLOT_NAME}" || true
          exit 1

      - name: Swap staging ➜ production
        run: |
          az webapp deployment slot swap \
            --resource-group "${AZURE_RESOURCE_GROUP}" \
            --name "${AZURE_WEBAPP_NAME}" \
            --slot "${AZURE_SLOT_NAME}" \
            --target-slot production

      - name: Verify production health
        if: ${{ success() }}
        shell: bash
        run: |
          set -e
          URL="${{ steps.host.outputs.prod_url }}${HEALTH_CHECK_PATH}"
          echo "Probing: $URL"
          for i in {1..60}; do
            if curl -4 -Ssf --connect-timeout 5 "$URL" -D - -o /dev/null; then
              echo "Production healthy (HTTP 200)"
              exit 0
            fi
            sleep 2
          done
          echo "Production failed health check after swap" >&2
          curl -4 -v "$URL" || true
          exit 1
