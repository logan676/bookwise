name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build (.NET 8)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true

      - name: Show dotnet info
        run: dotnet --info

      - name: Restore
        run: dotnet restore BookWise.sln

      - name: Build
        run: dotnet build BookWise.sln --configuration Release --no-restore

      - name: Detect test projects
        id: detect_tests
        shell: bash
        run: |
          if git ls-files '*.csproj' | grep -E '(Test|Tests)\.csproj$' >/dev/null; then
            echo "has_tests=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_tests=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Test
        if: steps.detect_tests.outputs.has_tests == 'true'
        run: dotnet test BookWise.sln --configuration Release --no-build --verbosity normal

  smoke:
    name: API Smoke Test
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true

      - name: Restore and Build
        run: |
          dotnet restore BookWise.sln
          dotnet build BookWise.sln --configuration Release --no-restore

      - name: Launch application
        run: |
          nohup dotnet run --project BookWise.Web/BookWise.Web.csproj --urls "http://localhost:5062" > app.log 2>&1 &
          echo $! > app.pid

      - name: Wait for readiness
        shell: bash
        run: |
          for i in {1..60}; do
            if curl -sf "http://localhost:5062/healthz" >/dev/null; then
              echo "App is up"
              exit 0
            fi
            sleep 1
          done
          echo "App failed to start in time" >&2
          tail -n 200 app.log || true
          exit 1

      - name: Create a book (POST /api/books)
        shell: bash
        run: |
          http_code=$(curl -s -o response.json -w "%{http_code}" -X POST \
            http://localhost:5062/api/books \
            -H "Content-Type: application/json" \
            -d '{
              "Title": "CI Smoke Test",
              "Author": "CI Bot",
              "Status": "plan-to-read",
              "IsFavorite": false
            }')
          echo "HTTP $http_code"
          cat response.json || true
          if [[ "$http_code" != 201 && "$http_code" != 200 ]]; then
            echo "POST /api/books failed" >&2
            exit 1
          fi

      - name: List books (GET /api/books)
        run: |
          curl -sf http://localhost:5062/api/books > books.json
          test -s books.json
          wc -c books.json

      - name: Print last logs on failure
        if: failure()
        run: |
          echo "--- tail app.log ---"
          tail -n 200 app.log || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-logs
          path: |
            app.log
            books.json
            response.json

      - name: Stop application
        if: always()
        run: |
          if [[ -f app.pid ]]; then
            kill $(cat app.pid) || true
          fi
